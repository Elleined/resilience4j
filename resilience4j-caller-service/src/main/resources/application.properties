# Calling service
calling-service.name=resilience4j-calling-service
calling-service.base-url=http://localhost:8010

# Logger
logging.buffer.size=1024
logging.level.com.elleined.resilience4j-caller-service=DEBUG

# Multipart properties
spring.servlet.multipart.max-file-size=3MB
server.tomcat.max-swallow-size=-1

# Application
server.port=8020
spring.application.name=resilience4j-caller-service

# Discovery client
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# Actuator Properties
management.security.enabled=false
management.endpoint.health.show-details=always
management.health.circuitbreakers.enabled=true

# Feign Client
spring.cloud.openfeign.circuitbreaker.enabled=true
feign.client.config.default.connectTimeout=5000
feign.client.config.default.readTimeout=5000
feign.circuitbreaker.alphanumeric-ids.enabled=true
#feign.circuitbreaker.enabled=true

# Circuit Breaker - Circuit will go to Open state when 3 out of 5 calls will fail.
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.slidingWindowSize=5
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=3
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=PT30S
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true

# Here you can add many circuit breaker configurations
# You can use the default config above and override it when you want with the sample below
# Template: resilience4j.circuitbreaker.instances.<anotherCircuitBreakerConfiguration>.<otherConfiguration>
# Example: resilience4j.circuitbreaker.instances.callingServicePostMethod.permittedNumberOfCallsInHalfOpenState=99
# !!! Important note: when adding your custom circuit breaker configuration you must reference it by the name you given here callingServicePostMethod in your @CircuitBreaker annotation when you want to use it otherwise it wll use the default config.
# resilience4j.circuitbreaker.instances.callingServiceCircuitBreaker.baseConfig=default

# Retry mechanism - A maximum of 3 requests will be retried with exponential difference in between their execution
resilience4j.retry.configs.default.maxAttempts=3
resilience4j.retry.configs.default.waitDuration=10s
resilience4j.retry.configs.default.enableExponentialBackoff=true
resilience4j.retry.configs.default.exponentialBackoffMultiplier=2

# Here you can add many retry configurations
# You can use the default config above and override it when you want with the sample below
# Template: resilience4j.retry.instances.<anotherRetryConfiguration>.<otherConfiguration>
# Example: resilience4j.retry.instances.callingServicePostMethod.permittedNumberOfCallsInHalfOpenState=99
# !!! Important note: when adding your custom retry configuration you must reference it by the name you given here callingServicePostMethod in your @Retry annotation when you want to use it otherwise it wll use the default config.
# resilience4j.retry.instances.callingServiceRetry.baseConfig=default